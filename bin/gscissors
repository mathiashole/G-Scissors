#!/usr/bin/perl

use strict;
use warnings;
use FindBin qw($Bin);
use File::Spec;
use Getopt::Long;

my $stat_flag = 0;
my $length_flag = 0;
my $help_flag = 0;
my $version_flag = 0;

GetOptions(
    "stat" => \$stat_flag,
    "length" => \$length_flag,
    "help" => \$help_flag,
    "version" => \$version_flag
);


my $script_dir = $FindBin::Bin;
my $lib_dir = File::Spec->catdir($script_dir, '..', 'lib');  # Go back one level to access "lib"
my $CONVERT_SCRIPT = File::Spec->catfile($lib_dir, 'convertform.pl');
my $EXTRACT_SCRIPT = File::Spec->catfile($lib_dir, 'extract.pl');

## CHANGE OPTIONG FLAG WITH MODULE
my $f1 = shift or die "Error\tMissing option.\n";
my $f2 = shift;
my $f3 = shift;
my $f4 = shift;
my $f5 = shift;
#my ($f1, $f2, $f3, $f4, $f5) = @ARGV;

my $f6 = f6_define(shift);
#my $f5 = "$Bin/output/$f5A";
print $f5;
# Check if a text file was provided as an argument

# Function to show help
if ($f1 eq '-h' || $f1 eq '--help') {
    show_help();
} elsif ($f1 eq '-v' || $f1 eq '--version') {
    show_version();
} elsif ($f1 eq '-fasta' || $f1 eq '--fasta') {
    validation_and_execution_flow($f1, $f2, $f3, $f4, $f5, $f6);
} else {
    print "Error\tUnrecognized option: $f1\n\n \tCheck --help or manual\tüîç\n";
}

## Function to show help of the program
sub show_help {

  print << 'HELP';
  "Usage: GScissors üî™

  üíª Available [OPTIONS]:

    -h, --help		Show this help.
    -v, --version	Show the version of the program.
    -fasta, --fasta Your sequence data format.
    -gff, --gff		If your data is gff format.
	-bed, --bed		If your data is bed format.
    -txt, --text	If your data is txt format.

  üìÇ Available [ARGUMENTS]:

	  first argument sequence in fasta format.
	  second argument input txt, bed or gff format.
	  third argument output fasta file.

  üìÑ The format of txt table [FORMAT]:
    sequence_ID	start	end  
    sequence_ID	start	end	  output_ID

  üì® CONTACT
    https://github.com/mathiashole

    MIT ¬© Mathias Mangino
HELP
}

# Function to show the version of the program
sub show_version {
    print "GScissors.pl v1.2.0-beta\n";
}

sub validate_filename_format {
    my ($filename) = @_;
    # Regular expression to check if the filename has a valid extension
    return $filename =~ /^[^.]+\.(txt|gff|bed)$/i;
}

sub process_conversion {
    my ($f3, $f4) = @_;

    my $convert_run = "perl $CONVERT_SCRIPT $f3 $f4";
    # Capture command output
    my $output = `$convert_run`;  

    return $output;
}

sub process_extract {
    my ($f1, $f2, $f3, $f4, $f5, $f6) = @_;

    print "Start of format conversion $f4:\n";
    # This section execute process_conversion() and save in variable
    my $run_process_conversion = process_conversion($f3, $f4);
    
    # split array into line
    my @array = split("\n", $run_process_conversion);
    
    my $acumulated_output = '';

    foreach my $line (@array) {
       # Work with each line in the array
        #print "$line\n";
        # Accumulate line in variable
        my $acumulated_output .= "$line\n";

    }
    
    if ($@) {
        print "Error\tConversion faild$@\n";
    } else {
        print "Successful\tConversion completed\n\n";
    }
    
    # Command in perl to be executed
    my $extract_run = "perl $EXTRACT_SCRIPT $f2 $acumulated_output $f4 $f5 $f6";
    
    print "Start sequence extraction:";

    #system($extract_run);  # Capture command output
    my $exit_code = system($extract_run);  # Capture command exit code

    if ($exit_code == 0) {
        print "\nSuccessful\tExtraction completed\n\n";
    } else {
        print "\nError\tExtraction faild: $exit_code\n";
    }
}

sub check_fasta_format {
    my ($file) = @_;

    open(my $fh, "<", $file) or return 0;

    my $is_fasta = 0;
    while (<$fh>) {
        chomp;
        if (/^>/) {
            $is_fasta = 1;
            last;
        }
    }

    close($fh);

    return $is_fasta;
}

sub validate_fasta_format {
    my ($file) = @_;

    if (check_fasta_format($file)) {
        print "Successful\tIt's FASTA format: $file\n\n";
    } else {
        die "Error\tit's not valid FASTA format: $file\n";
    }
}


sub validation_and_execution_flow {
    my ($f1, $f2, $f3, $f4, $f5, $f6) = @_;

    #print "$f1 $f2 $f3 $f4 $f5 $f6";

    if ($f1 eq '-fasta' || $f1 eq '--fasta') {
        print "\nStart GScissots program:\n\n";
        print "FASTA format validation:\n";
        if (validate_fasta_format($f2)) {
            # Continue here if FASTA format validation is successful
            if ($f3 eq '-txt' || $f3 eq '--text' ||
                $f3 eq '-gff' || $f3 eq '--gff' ||
                $f3 eq '-bed' || $f3 eq '--bed') {
                # ADD OTHER CONDITIONAL VALIDATION FILE FORMAT GFF BED or TXT!!!!
                process_extract($f1, $f2, $f3, $f4, $f5, $f6);

            } else {
                print "Error\tUnrecognized option: $f3\n";
            }
        } else {
            print "Error\tInvalid FASTA format: $f2\n";
            # Handle the case of invalid format if necessary
        }
    } else {
        print "Error\tUnrecognized option: $f1\n";
        # Handle the case of unrecognized option if necessary
    }
}

sub f6_define {
    my ($var) = @_;

    if (defined $var) {
        $var = 1;  # The variable is defined
    } else {
        $var = 0;  # The variable is not defined
    }

    return $var;
}